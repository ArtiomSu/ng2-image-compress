{"version":3,"file":"ng2-image-compress.service.js","sourceRoot":"","sources":["../../src/lib/ng2-image-compress.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {IImage} from './compressimage';\nimport {ImageUtilityService} from './imageutilityservice';\nimport {from as Observablefrom, Observable} from 'rxjs';\nimport {ResizeOptions} from './resizeoptions';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ImageCompressService {\n\n\n  private static jicCompress(sourceImgObj, options: ResizeOptions) {\n    const outputFormat = options.Resize_Type;\n    const quality = options.Resize_Quality || 50;\n    let mimeType = 'image/jpeg';\n    if (outputFormat !== undefined && outputFormat === 'png') {\n      mimeType = 'image/png';\n    }\n\n\n    const maxHeight = options.Resize_Max_Height || 300;\n    const maxWidth = options.Resize_Max_Width || 250;\n\n    console.log('MAX Width n Height');\n    console.log(options.Resize_Max_Height);\n    console.log(options.Resize_Max_Width);\n    console.log('Quality');\n    console.log(quality);\n\n    let height = sourceImgObj.height;\n    let width = sourceImgObj.width;\n\n    // calculate the width and height, constraining the proportions\n    if (width > height) {\n      if (width > maxWidth) {\n        height = Math.round(height *= maxWidth / width);\n        width = maxWidth;\n      }\n    } else {\n      if (height > maxHeight) {\n        width = Math.round(width *= maxHeight / height);\n        height = maxHeight;\n      }\n    }\n    console.log('CVS Width n Height');\n    console.log(width);\n    console.log(height);\n    console.log('Quality');\n    console.log(quality);\n\n    const cvs = document.createElement('canvas');\n    cvs.width = width;\n    cvs.height = height;\n    const ctx = cvs.getContext('2d').drawImage(sourceImgObj, 0, 0, width, height);\n    const newImageData = cvs.toDataURL(mimeType, quality / 100);\n    const resultImageObj = new Image();\n    resultImageObj.src = newImageData;\n    return resultImageObj.src;\n  }\n\n\n  public static compressImage(sourceImage: IImage, options: ResizeOptions, callback) {\n    const that = this;\n    ImageUtilityService.createImage(sourceImage.imageDataUrl, function (image) {\n      const dataURLcompressed = that.jicCompress(image, options);\n      sourceImage.compressedImage = {\n        fileName: sourceImage.fileName,\n        imageObjectUrl: '',\n        imageDataUrl: dataURLcompressed,\n        type: dataURLcompressed.match(/:(.+\\/.+);/)[1],\n        compressedImage: null\n      };\n      callback(sourceImage);\n    });\n  }\n\n  public static filesToCompressedImageSourceEx(fileList: FileList, option: ResizeOptions): Promise<Observable<IImage>> {\n\n    return new Promise<Observable<IImage>>((resolve, reject) => {\n      let count = fileList.length;\n      const observer = ImageUtilityService.filesToSourceImages(fileList);\n      const images: Array<IImage> = [];\n      observer.subscribe((image) => {\n        images.push(image);\n        if (option == null) {\n          option = new ResizeOptions();\n        }\n        ImageCompressService.compressImage(image, option, (imageRef) => {\n          if (--count === 0) {\n            resolve(Observablefrom(images));\n          }\n        });\n      }, (error) => {\n        reject('Error while compressing images');\n      });\n    });\n  }\n\n  public static filesToCompressedImageSource(fileList: FileList): Promise<Observable<IImage>> {\n\n\n    return new Promise<Observable<IImage>>((resolve, reject) => {\n      let count = fileList.length;\n      const observer = ImageUtilityService.filesToSourceImages(fileList);\n      const images: Array<IImage> = [];\n      observer.subscribe((image) => {\n        images.push(image);\n\n        ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n          if (--count === 0) {\n            resolve(Observablefrom(images));\n          }\n        });\n      }, (error) => {\n        reject('Error while compressing images');\n      });\n    });\n  }\n\n  public static filesArrayToCompressedImageSourceEx(fileList: File[], option: ResizeOptions): Promise<Observable<IImage>> {\n\n    return new Promise<Observable<IImage>>((resolve, reject) => {\n      let count = fileList.length;\n      const observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n      const images: Array<IImage> = [];\n      observer.subscribe((image) => {\n        images.push(image);\n        if (option == null) {\n          option = new ResizeOptions();\n        }\n        ImageCompressService.compressImage(image, option, (imageRef) => {\n          if (--count === 0) {\n            resolve(Observablefrom(images));\n          }\n        });\n      }, (error) => {\n        reject('Error while compressing images');\n      });\n    });\n  }\n\n  public static filesArrayToCompressedImageSource(fileList: File[]): Promise<Observable<IImage>> {\n\n    return new Promise<Observable<IImage>>((resolve, reject) => {\n      let count = fileList.length;\n      const observer = ImageUtilityService.filesArrayToSourceImages(fileList);\n      const images: Array<IImage> = [];\n      observer.subscribe((image) => {\n        images.push(image);\n        ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n          if (--count === 0) {\n            resolve(Observablefrom(images));\n          }\n        });\n      }, (error) => {\n        reject('Error while compressing images');\n      });\n    });\n  }\n\n  public static IImageListToCompressedImageSource(images: IImage[]): Promise<IImage[]> {\n\n    return new Promise<IImage[]>((resolve, reject) => {\n      let count = images.length;\n      images.forEach(image => {\n        ImageCompressService.compressImage(image, new ResizeOptions(), (imageRef) => {\n          console.log(image);\n          if (--count === 0) {\n            resolve(images);\n          }\n        });\n      });\n\n    });\n  }\n\n  public static IImageListToCompressedImageSourceEx(images: IImage[], resizeOption: ResizeOptions): Promise<IImage[]> {\n    return new Promise<IImage[]>((resolve, reject) => {\n      let count = images.length;\n      images.forEach(image => {\n        if (resizeOption == null) {\n          resizeOption = new ResizeOptions();\n        }\n        ImageCompressService.compressImage(image, resizeOption, (imageRef) => {\n          console.log(image);\n          if (--count === 0) {\n            resolve(images);\n          }\n        });\n      });\n\n    });\n  }\n\n}\n\n"]}